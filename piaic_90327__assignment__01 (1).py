# -*- coding: utf-8 -*-
"""PIAIC 90327 _Assignment _01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cdSjpXX_hH8D3i-7Oh1c9e-kETbnKSsb

# **Assignment For Numpy**
"""



"""Difficulty Level **Beginner**

1. Import the numpy package under the name np
"""

import numpy as np

"""2. Create a null vector of size 10 """

x = np.zeros(10)
x



"""3. Create a vector with values ranging from 10 to 49"""

x= np.arange(10,50)
x



"""4. Find the shape of previous array in question 3"""

import numpy as np
x.shape



"""5. Print the type of the previous array in question 3"""

x.dtype



"""6. Print the numpy version and the configuration

"""

print(np.__version__)
print(np.show_config())



"""7. Print the dimension of the array in question 3

"""

np.ndim(x)



"""8. Create a boolean array with all the True values"""

import numpy as np
l=[10, 11, 12 ,13, 14, 15, 16, 17, 18 ,19, 20]
z=np.array(l)
z>9



"""9. Create a two dimensional array



"""

x=np.zeros((20,20))
print(x)
x.shape





"""10. Create a three dimensional array


"""

import numpy as np
z = np.zeros((4,4,25))
print(z)











"""Difficulty Level **Easy**

11. Reverse a vector (first element becomes last)
"""

x= np.arange(10,50)
np.flip(x)





"""12. Create a null vector of size 10 but the fifth value which is 1 """

s = np.zeros(10)
print (s)
s[4] = 1
print (s)



"""13. Create a 3x3 identity matrix"""

arr=np.identity(3)
print(arr)





"""14. arr = np.array([1, 2, 3, 4, 5]) 

---


.-*+
0 Convert the data type of the given array from int to float 
"""

arr = np.array([1, 2, 3, 4, 5]) 
arr = arr.astype('float64') 
print(arr) 
print(arr.dtype)

"""15. arr1 =          np.array([[1., 2., 3.],

                    [4., 5., 6.]])  
                      
    arr2 = np.array([[0., 4., 1.],
     
                   [7., 2., 12.]])

---


Multiply arr1 with arr2

"""

arr1 = np.array([[1., 2., 3.],
            [4., 5., 6.]])
arr2 = np.array([[0., 4., 1.],
           [7., 2., 12.]])
arr1*arr2

"""16. arr1 = np.array([[1., 2., 3.],
                    [4., 5., 6.]]) 
                    
    arr2 = np.array([[0., 4., 1.], 
                    [7., 2., 12.]])


---

Make an array by comparing both the arrays provided above
"""

arr1 = np.array([[1., 2., 3.],
            [4., 5., 6.]]) 
arr2 = np.array([[0., 4., 1.], 
            [7., 2., 12.]])

comparison = arr1 == arr2
equal_arrays = comparison.all() 
  
print(equal_arrays)

"""17. Extract all odd numbers from arr with values(0-9)"""

a = np.array([0,1,2,3,4,5,6,7,8,9])
a[a % 2 == 1]

"""18. Replace all odd numbers to -1 from previous array"""

a = np.array([0,1,2,3,4,5,6,7,8,9])
-a[a % 2 == 1]

"""19. arr = np.arange(10)


---

Replace the values of indexes 5,6,7 and 8 to **12**
"""

arr=np.arange(10)
arr[5] 
arr[5:9] 
arr[5:9] = 12
print(arr)

"""20. Create a 2d array with 1 on the border and 0 inside"""

import numpy as np
x = np.ones((5,5))
x[1:-1,1:-1] = 0
print(x)

"""Difficulty Level **Medium**

21. arr2d = np.array([[1, 2, 3],

                    [4, 5, 6], 

                    [7, 8, 9]])

---

Replace the value 5 to 12
"""

arr2d = np.array([[1, 2, 3],
            [4, 5, 6], 

            [7, 8, 9]])
arr2d[5] = 12
print(arr2d)

"""22. arr3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])

---
Convert all the values of 1st array to 64

"""

import numpy as np
arr3d = np.array([[[1, 2, 3], 
                   [4, 5, 6]], 
                  [[7, 8, 9], 
                   [10, 11, 12]]])
arr3d = arr.astype('float64') 
print(arr3d)

"""23. Make a 2-Dimensional array with values 0-9 and slice out the first 1st 1-D array from it"""

x=[[0,1,2,3,4],[5,6,7,8,9]]
d=np.array(x)
np.split(d,[5])

"""24. Make a 2-Dimensional array with values 0-9 and slice out the 2nd value from 2nd 1-D array from it"""

x=np.arange(0,9)

"""25. Make a 2-Dimensional array with values 0-9 and slice out the third column but only the first two rows"""



"""26. Create a 10x10 array with random values and find the minimum and maximum values"""

import numpy as np
x = np.random.random((10,10))
xmin, xmax = x.min(), x.max()
print(xmin, xmax)

"""27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
---
Find the common items between a and b

"""

import numpy as np
a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a, b))

"""28. a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])

---
Find the positions where elements of a and b match


"""

a = np.array([1,2,3,2,3,4,3,4,5,6])
b = np.array([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a,b))

"""29.  names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])  data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will**

"""

names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
data = np.random.randn(7, 4)
print(names)
print(data)
data[names == 'Will']

"""30. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4)

---
Find all the values from array **data** where the values from array **names** are not equal to **Will** and **Joe**


"""



"""Difficulty Level **Hard**

31. Create a 2D array of shape 5x3 to contain decimal numbers between 1 and 15.
"""

import numpy as np
arr = np.arange(0,15)
x = arr.reshape((5,3))
print(x)

"""32. Create an array of shape (2, 2, 4) with decimal numbers between 1 to 16."""

import numpy as np
arr = np.arange(0,16)
x = arr.reshape((2,2,4))
print(x)

"""33. Swap axes of the array you created in Question 32"""

import numpy as np
arr = np.arange(0,16)
x = arr.reshape((2,2,4))
arr = x.swapaxes(1, 2)
print(arr)

"""34. Create an array of size 10, and find the square root of every element in the array, if the values less than 0.5, replace them with 0"""

import numpy as np
arr = np.arange(10)
print(arr)
z = np.sqrt(arr ** 2)
print(z)

"""35. Create two random arrays of range 12 and make an array with the maximum values between each element of the two arrays"""

h=np.random.rand(12)
print(h)
k=np.random.rand(12)
print(k)
hmax, kmax = h.max(), k.max()
print(hmax, kmax)

"""36. names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

---
Find the unique names and sort them out!

"""

names=np.unique(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
np.unique(names)

"""37. a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])

---
From array a remove all items present in array b


"""

a = np.array([1,2,3,4,5])
b = np.array([5,6,7,8,9])
result = np.setdiff1d(a, b)
print(result)

"""38.  Following is the input NumPy array delete column two and insert following new column in its place.

---
sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]]) 


---

newColumn = numpy.array([[10,10,10]])

"""

sampleArray = numpy.array([[34,43,73],[82,22,12],[53,94,66]])
del ['numpy.array'(2,6)]
newColumn = numpy.array([[10,10,10]])

"""39. x = np.array([[1., 2., 3.], [4., 5., 6.]]) y = np.array([[6., 23.], [-1, 7], [8, 9]])


---
Find the dot product of the above two matrix

"""

x = np.array([1,2,3],[4,5,6])
y = np.array([[6,23],[-1,7],[8,9]])

z = x * y
print(z)

"""40. Generate a matrix of 20 random values and find its cumulative sum"""

import numpy as np
c=np.random.rand(2,3,4)
np.cumsum(c)
c